// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class capTableApproved extends ethereum.Event {
  get params(): capTableApproved__Params {
    return new capTableApproved__Params(this);
  }
}

export class capTableApproved__Params {
  _event: capTableApproved;

  constructor(event: capTableApproved) {
    this._event = event;
  }

  get capTableAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class capTableDeclined extends ethereum.Event {
  get params(): capTableDeclined__Params {
    return new capTableDeclined__Params(this);
  }
}

export class capTableDeclined__Params {
  _event: capTableDeclined;

  constructor(event: capTableDeclined) {
    this._event = event;
  }

  get capTableAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reason(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class capTableQued extends ethereum.Event {
  get params(): capTableQued__Params {
    return new capTableQued__Params(this);
  }
}

export class capTableQued__Params {
  _event: capTableQued;

  constructor(event: capTableQued) {
    this._event = event;
  }

  get capTableAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class capTableRemoved extends ethereum.Event {
  get params(): capTableRemoved__Params {
    return new capTableRemoved__Params(this);
  }
}

export class capTableRemoved__Params {
  _event: capTableRemoved;

  constructor(event: capTableRemoved) {
    this._event = event;
  }

  get capTableAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CapTableRegistry extends ethereum.SmartContract {
  static bind(address: Address): CapTableRegistry {
    return new CapTableRegistry("CapTableRegistry", address);
  }

  controllers(): Array<Address> {
    let result = super.call("controllers", "controllers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_controllers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("controllers", "controllers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getActiveCount(): BigInt {
    let result = super.call("getActiveCount", "getActiveCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getActiveCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActiveCount",
      "getActiveCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAddress(id: Bytes): Address {
    let result = super.call("getAddress", "getAddress(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(id)
    ]);

    return result[0].toAddress();
  }

  try_getAddress(id: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("getAddress", "getAddress(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLastQuedAddress(id: Bytes): Address {
    let result = super.call(
      "getLastQuedAddress",
      "getLastQuedAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(id)]
    );

    return result[0].toAddress();
  }

  try_getLastQuedAddress(id: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLastQuedAddress",
      "getLastQuedAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getList(): Array<Address> {
    let result = super.call("getList", "getList():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getList(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getList", "getList():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getQuedCount(): BigInt {
    let result = super.call("getQuedCount", "getQuedCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getQuedCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getQuedCount", "getQuedCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStatus(adr: Address): BigInt {
    let result = super.call("getStatus", "getStatus(address):(uint256)", [
      ethereum.Value.fromAddress(adr)
    ]);

    return result[0].toBigInt();
  }

  try_getStatus(adr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getStatus", "getStatus(address):(uint256)", [
      ethereum.Value.fromAddress(adr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getid(adr: Address): Bytes {
    let result = super.call("getid", "getid(address):(bytes32)", [
      ethereum.Value.fromAddress(adr)
    ]);

    return result[0].toBytes();
  }

  try_getid(adr: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getid", "getid(address):(bytes32)", [
      ethereum.Value.fromAddress(adr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isController(adr: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(adr)
    ]);

    return result[0].toBoolean();
  }

  try_isController(adr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(adr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get controllers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DeclineCall extends ethereum.Call {
  get inputs(): DeclineCall__Inputs {
    return new DeclineCall__Inputs(this);
  }

  get outputs(): DeclineCall__Outputs {
    return new DeclineCall__Outputs(this);
  }
}

export class DeclineCall__Inputs {
  _call: DeclineCall;

  constructor(call: DeclineCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reason(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeclineCall__Outputs {
  _call: DeclineCall;

  constructor(call: DeclineCall) {
    this._call = call;
  }
}

export class QueCall extends ethereum.Call {
  get inputs(): QueCall__Inputs {
    return new QueCall__Inputs(this);
  }

  get outputs(): QueCall__Outputs {
    return new QueCall__Outputs(this);
  }
}

export class QueCall__Inputs {
  _call: QueCall;

  constructor(call: QueCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class QueCall__Outputs {
  _call: QueCall;

  constructor(call: QueCall) {
    this._call = call;
  }
}

export class RemoveCall extends ethereum.Call {
  get inputs(): RemoveCall__Inputs {
    return new RemoveCall__Inputs(this);
  }

  get outputs(): RemoveCall__Outputs {
    return new RemoveCall__Outputs(this);
  }
}

export class RemoveCall__Inputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveCall__Outputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }
}

export class SetControllersCall extends ethereum.Call {
  get inputs(): SetControllersCall__Inputs {
    return new SetControllersCall__Inputs(this);
  }

  get outputs(): SetControllersCall__Outputs {
    return new SetControllersCall__Outputs(this);
  }
}

export class SetControllersCall__Inputs {
  _call: SetControllersCall;

  constructor(call: SetControllersCall) {
    this._call = call;
  }

  get operators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetControllersCall__Outputs {
  _call: SetControllersCall;

  constructor(call: SetControllersCall) {
    this._call = call;
  }
}
