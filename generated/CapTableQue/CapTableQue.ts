// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class qued extends ethereum.Event {
  get params(): qued__Params {
    return new qued__Params(this);
  }
}

export class qued__Params {
  _event: qued;

  constructor(event: qued) {
    this._event = event;
  }

  get capTable(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class statusUpdate extends ethereum.Event {
  get params(): statusUpdate__Params {
    return new statusUpdate__Params(this);
  }
}

export class statusUpdate__Params {
  _event: statusUpdate;

  constructor(event: statusUpdate) {
    this._event = event;
  }

  get capTable(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reason(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class CapTableQue__infoResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }
}

export class CapTableQue extends ethereum.SmartContract {
  static bind(address: Address): CapTableQue {
    return new CapTableQue("CapTableQue", address);
  }

  controllers(): Array<Address> {
    let result = super.call("controllers", "controllers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_controllers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("controllers", "controllers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRegistry(): Address {
    let result = super.call("getRegistry", "getRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_getRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRegistry", "getRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStatus(adr: Address): BigInt {
    let result = super.call("getStatus", "getStatus(address):(uint256)", [
      ethereum.Value.fromAddress(adr)
    ]);

    return result[0].toBigInt();
  }

  try_getStatus(adr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getStatus", "getStatus(address):(uint256)", [
      ethereum.Value.fromAddress(adr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  info(adr: Address): CapTableQue__infoResult {
    let result = super.call("info", "info(address):(uint256,bytes32)", [
      ethereum.Value.fromAddress(adr)
    ]);

    return new CapTableQue__infoResult(
      result[0].toBigInt(),
      result[1].toBytes()
    );
  }

  try_info(adr: Address): ethereum.CallResult<CapTableQue__infoResult> {
    let result = super.tryCall("info", "info(address):(uint256,bytes32)", [
      ethereum.Value.fromAddress(adr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CapTableQue__infoResult(value[0].toBigInt(), value[1].toBytes())
    );
  }

  isController(adr: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(adr)
    ]);

    return result[0].toBoolean();
  }

  try_isController(adr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(adr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  list(): Array<Address> {
    let result = super.call("list", "list():(address[])", []);

    return result[0].toAddressArray();
  }

  try_list(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("list", "list():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  listApproved(): Array<Address> {
    let result = super.call("listApproved", "listApproved():(address[])", []);

    return result[0].toAddressArray();
  }

  try_listApproved(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "listApproved",
      "listApproved():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  listDeclined(): Array<Address> {
    let result = super.call("listDeclined", "listDeclined():(address[])", []);

    return result[0].toAddressArray();
  }

  try_listDeclined(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "listDeclined",
      "listDeclined():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  listQued(): Array<Address> {
    let result = super.call("listQued", "listQued():(address[])", []);

    return result[0].toAddressArray();
  }

  try_listQued(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("listQued", "listQued():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get controllers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uuid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class ProcessCall extends ethereum.Call {
  get inputs(): ProcessCall__Inputs {
    return new ProcessCall__Inputs(this);
  }

  get outputs(): ProcessCall__Outputs {
    return new ProcessCall__Outputs(this);
  }
}

export class ProcessCall__Inputs {
  _call: ProcessCall;

  constructor(call: ProcessCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get reason(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ProcessCall__Outputs {
  _call: ProcessCall;

  constructor(call: ProcessCall) {
    this._call = call;
  }
}

export class SetControllersCall extends ethereum.Call {
  get inputs(): SetControllersCall__Inputs {
    return new SetControllersCall__Inputs(this);
  }

  get outputs(): SetControllersCall__Outputs {
    return new SetControllersCall__Outputs(this);
  }
}

export class SetControllersCall__Inputs {
  _call: SetControllersCall;

  constructor(call: SetControllersCall) {
    this._call = call;
  }

  get operators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetControllersCall__Outputs {
  _call: SetControllersCall;

  constructor(call: SetControllersCall) {
    this._call = call;
  }
}

export class SetRegistryCall extends ethereum.Call {
  get inputs(): SetRegistryCall__Inputs {
    return new SetRegistryCall__Inputs(this);
  }

  get outputs(): SetRegistryCall__Outputs {
    return new SetRegistryCall__Outputs(this);
  }
}

export class SetRegistryCall__Inputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRegistryCall__Outputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }
}
