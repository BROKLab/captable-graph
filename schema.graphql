type CapTableRegistry @entity {
  id: ID!
  count: BigInt!
  capTables: [CapTable!]! @derivedFrom(field: "registry")
  address: Bytes!
}

enum CapTableRegistryStatus {
  UNKNOWN
  QUED
  APPROVED
  DECLINED
  REMOVED
}

# type _Schema_
#   @fulltext(
#     name: "capTableSearch"
#     language: en
#     algorithm: rank
#     include: [
#       {
#         entity: "CapTable"
#         fields: [{ name: "name" }, { name: "symbol" }, { name: "orgnr" }]
#       }
#     ]
#   )

type CapTable @entity {
  id: ID!
  name: String!
  symbol: String!
  partitions: [String!]
  status: CapTableRegistryStatus!
  registry: CapTableRegistry
  totalSupply: BigInt!
  owner: Bytes!
  minter: Bytes!
  controllers: [Bytes!]
  orgnr: String!
  tokenHolders: [TokenHolder!] @derivedFrom(field: "capTable")
}

type TokenHolder @entity {
  id: ID!
  capTable: CapTable
  address: Bytes!
  balances: [Balance!] @derivedFrom(field: "tokenHolder")
}

type Balance @entity {
  id: ID!
  amount: BigInt!
  partition: String!
  tokenHolder: TokenHolder
  capTable: CapTable
}

type Vault @entity {
  id: ID!
  capTable: CapTable!
  status: Int
  cTokenAddress: Bytes!
  cTokenTotalSupply: Bytes!
  cTokenHolders: [ERC20TokenHolder!] @derivedFrom(field: "cTokenVault")
  pTokenAddress: Bytes!
  pTokenTotalSupply: Bytes!
  pTokenHolders: [ERC20TokenHolder!] @derivedFrom(field: "pTokenVault")
  tokenHolder: TokenHolder
  capTable: CapTable
}

type ERC20TokenHolder @entity {
  id: ID!
  amount: BigInt!
  cTokenVault: Vault
  pTokenVault: Vault
}
