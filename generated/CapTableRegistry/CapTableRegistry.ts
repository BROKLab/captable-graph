// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class capTableAdded extends ethereum.Event {
  get params(): capTableAdded__Params {
    return new capTableAdded__Params(this);
  }
}

export class capTableAdded__Params {
  _event: capTableAdded;

  constructor(event: capTableAdded) {
    this._event = event;
  }

  get capTableAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class capTableRemoved extends ethereum.Event {
  get params(): capTableRemoved__Params {
    return new capTableRemoved__Params(this);
  }
}

export class capTableRemoved__Params {
  _event: capTableRemoved;

  constructor(event: capTableRemoved) {
    this._event = event;
  }

  get capTableRemoved(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CapTableRegistry__infoResult {
  value0: Bytes;
  value1: boolean;

  constructor(value0: Bytes, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class CapTableRegistry extends ethereum.SmartContract {
  static bind(address: Address): CapTableRegistry {
    return new CapTableRegistry("CapTableRegistry", address);
  }

  controllers(): Array<Address> {
    let result = super.call("controllers", "controllers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_controllers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("controllers", "controllers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  info(adr: Address): CapTableRegistry__infoResult {
    let result = super.call("info", "info(address):(bytes32,bool)", [
      ethereum.Value.fromAddress(adr)
    ]);

    return new CapTableRegistry__infoResult(
      result[0].toBytes(),
      result[1].toBoolean()
    );
  }

  try_info(adr: Address): ethereum.CallResult<CapTableRegistry__infoResult> {
    let result = super.tryCall("info", "info(address):(bytes32,bool)", [
      ethereum.Value.fromAddress(adr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CapTableRegistry__infoResult(value[0].toBytes(), value[1].toBoolean())
    );
  }

  isController(adr: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(adr)
    ]);

    return result[0].toBoolean();
  }

  try_isController(adr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(adr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  list(): Array<Address> {
    let result = super.call("list", "list():(address[])", []);

    return result[0].toAddressArray();
  }

  try_list(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("list", "list():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  listActive(): Array<Address> {
    let result = super.call("listActive", "listActive():(address[])", []);

    return result[0].toAddressArray();
  }

  try_listActive(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("listActive", "listActive():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get controllers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uuid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class RemoveCall extends ethereum.Call {
  get inputs(): RemoveCall__Inputs {
    return new RemoveCall__Inputs(this);
  }

  get outputs(): RemoveCall__Outputs {
    return new RemoveCall__Outputs(this);
  }
}

export class RemoveCall__Inputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }

  get adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveCall__Outputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }
}

export class SetControllersCall extends ethereum.Call {
  get inputs(): SetControllersCall__Inputs {
    return new SetControllersCall__Inputs(this);
  }

  get outputs(): SetControllersCall__Outputs {
    return new SetControllersCall__Outputs(this);
  }
}

export class SetControllersCall__Inputs {
  _call: SetControllersCall;

  constructor(call: SetControllersCall) {
    this._call = call;
  }

  get operators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetControllersCall__Outputs {
  _call: SetControllersCall;

  constructor(call: SetControllersCall) {
    this._call = call;
  }
}
